// Code generated by "stringer -type=OpcodeClass,OpcodeType,OpcodeArithmetic,OpcodeJump,OpcodeMode,AtomicOperation,AtomicModifier,ImmSource,OpcodeSize,Register -linecomment -output=stringer.go"; DO NOT EDIT.

package instruction

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BPF_LD-0]
	_ = x[BPF_LDX-1]
	_ = x[BPF_ST-2]
	_ = x[BPF_STX-3]
	_ = x[BPF_ALU-4]
	_ = x[BPF_JMP-5]
	_ = x[BPF_JMP32-6]
	_ = x[BPF_ALU64-7]
}

const _OpcodeClass_name = "BPF_LDBPF_LDXBPF_STBPF_STXBPF_ALUBPF_JMPBPF_JMP32BPF_ALU64"

var _OpcodeClass_index = [...]uint8{0, 6, 13, 19, 26, 33, 40, 49, 58}

func (i OpcodeClass) String() string {
	if i >= OpcodeClass(len(_OpcodeClass_index)-1) {
		return "OpcodeClass(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpcodeClass_name[_OpcodeClass_index[i]:_OpcodeClass_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LOAD_AND_STORE-0]
	_ = x[ARITHMETIC_AND_JUMP-1]
}

const _OpcodeType_name = "LOAD_AND_STOREARITHMETIC_AND_JUMP"

var _OpcodeType_index = [...]uint8{0, 14, 33}

func (i OpcodeType) String() string {
	if i >= OpcodeType(len(_OpcodeType_index)-1) {
		return "OpcodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpcodeType_name[_OpcodeType_index[i]:_OpcodeType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BPF_ADD-0]
	_ = x[BPF_SUB-16]
	_ = x[BPF_MUL-32]
	_ = x[BPF_DIV-48]
	_ = x[BPF_OR-64]
	_ = x[BPF_AND-80]
	_ = x[BPF_LSH-96]
	_ = x[BPF_RSH-112]
	_ = x[BPF_NEG-128]
	_ = x[BPF_MOD-144]
	_ = x[BPF_XOR-160]
	_ = x[BPF_MOV-176]
	_ = x[BPF_ARSH-192]
	_ = x[BPF_END-208]
}

const _OpcodeArithmetic_name = "BPF_ADDBPF_SUBBPF_MULBPF_DIVBPF_ORBPF_ANDBPF_LSHBPF_RSHBPF_NEGBPF_MODBPF_XORBPF_MOVBPF_ARSHBPF_END"

var _OpcodeArithmetic_map = map[OpcodeArithmetic]string{
	0:   _OpcodeArithmetic_name[0:7],
	16:  _OpcodeArithmetic_name[7:14],
	32:  _OpcodeArithmetic_name[14:21],
	48:  _OpcodeArithmetic_name[21:28],
	64:  _OpcodeArithmetic_name[28:34],
	80:  _OpcodeArithmetic_name[34:41],
	96:  _OpcodeArithmetic_name[41:48],
	112: _OpcodeArithmetic_name[48:55],
	128: _OpcodeArithmetic_name[55:62],
	144: _OpcodeArithmetic_name[62:69],
	160: _OpcodeArithmetic_name[69:76],
	176: _OpcodeArithmetic_name[76:83],
	192: _OpcodeArithmetic_name[83:91],
	208: _OpcodeArithmetic_name[91:98],
}

func (i OpcodeArithmetic) String() string {
	if str, ok := _OpcodeArithmetic_map[i]; ok {
		return str
	}
	return "OpcodeArithmetic(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BPF_JA-0]
	_ = x[BPF_JEQ-1]
	_ = x[BPF_JGT-2]
	_ = x[BPF_JGE-3]
	_ = x[BPF_JSET-4]
	_ = x[BPF_JNE-5]
	_ = x[BPF_JSGT-6]
	_ = x[BPF_JSGE-7]
	_ = x[BPF_CALL-8]
	_ = x[BPF_EXIT-9]
	_ = x[BPF_JLT-10]
	_ = x[BPF_JLE-11]
	_ = x[BPF_JSLT-12]
	_ = x[BPF_JSLE-13]
}

const _OpcodeJump_name = "BPF_JABPF_JEQBPF_JGTBPF_JGEBPF_JSETBPF_JNEBPF_JSGTBPF_JSGEBPF_CALLBPF_EXITBPF_JLTBPF_JLEBPF_JSLTBPF_JSLE"

var _OpcodeJump_index = [...]uint8{0, 6, 13, 20, 27, 35, 42, 50, 58, 66, 74, 81, 88, 96, 104}

func (i OpcodeJump) String() string {
	if i >= OpcodeJump(len(_OpcodeJump_index)-1) {
		return "OpcodeJump(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpcodeJump_name[_OpcodeJump_index[i]:_OpcodeJump_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BPF_IMM-0]
	_ = x[BPF_ABS-32]
	_ = x[BPF_IND-64]
	_ = x[BPF_MEM-96]
	_ = x[BPF_MEMSX-128]
	_ = x[BPF_ATOMIC-192]
}

const (
	_OpcodeMode_name_0 = "BPF_IMM"
	_OpcodeMode_name_1 = "BPF_ABS"
	_OpcodeMode_name_2 = "BPF_IND"
	_OpcodeMode_name_3 = "BPF_MEM"
	_OpcodeMode_name_4 = "BPF_MEMSX"
	_OpcodeMode_name_5 = "BPF_ATOMIC"
)

func (i OpcodeMode) String() string {
	switch {
	case i == 0:
		return _OpcodeMode_name_0
	case i == 32:
		return _OpcodeMode_name_1
	case i == 64:
		return _OpcodeMode_name_2
	case i == 96:
		return _OpcodeMode_name_3
	case i == 128:
		return _OpcodeMode_name_4
	case i == 192:
		return _OpcodeMode_name_5
	default:
		return "OpcodeMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BPF_XCHG-225]
	_ = x[BPF_CMPXCHG-241]
}

const (
	_AtomicOperation_name_0 = "BPF_XCHG"
	_AtomicOperation_name_1 = "BPF_CMPXCHG"
)

func (i AtomicOperation) String() string {
	switch {
	case i == 225:
		return _AtomicOperation_name_0
	case i == 241:
		return _AtomicOperation_name_1
	default:
		return "AtomicOperation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BPF_FETCH-1]
}

const _AtomicModifier_name = "BPF_FETCH"

var _AtomicModifier_index = [...]uint8{0, 9}

func (i AtomicModifier) String() string {
	i -= 1
	if i >= AtomicModifier(len(_AtomicModifier_index)-1) {
		return "AtomicModifier(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _AtomicModifier_name[_AtomicModifier_index[i]:_AtomicModifier_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BPF_IMM0-0]
	_ = x[BPF_IMM1-1]
	_ = x[BPF_IMM2-2]
	_ = x[BPF_IMM3-3]
	_ = x[BPF_IMM4-4]
	_ = x[BPF_IMM5-5]
	_ = x[BPF_IMM6-6]
}

const _ImmSource_name = "BPF_IMM0BPF_IMM1BPF_IMM2BPF_IMM3BPF_IMM4BPF_IMM5BPF_IMM6"

var _ImmSource_index = [...]uint8{0, 8, 16, 24, 32, 40, 48, 56}

func (i ImmSource) String() string {
	if i >= ImmSource(len(_ImmSource_index)-1) {
		return "ImmSource(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ImmSource_name[_ImmSource_index[i]:_ImmSource_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BPF_W-0]
	_ = x[BPF_H-8]
	_ = x[BPF_B-16]
	_ = x[BPF_DW-24]
}

const (
	_OpcodeSize_name_0 = "u32"
	_OpcodeSize_name_1 = "u16"
	_OpcodeSize_name_2 = "u8"
	_OpcodeSize_name_3 = "u64"
)

func (i OpcodeSize) String() string {
	switch {
	case i == 0:
		return _OpcodeSize_name_0
	case i == 8:
		return _OpcodeSize_name_1
	case i == 16:
		return _OpcodeSize_name_2
	case i == 24:
		return _OpcodeSize_name_3
	default:
		return "OpcodeSize(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BPF_R0-0]
	_ = x[BPF_R1-1]
	_ = x[BPF_R2-2]
	_ = x[BPF_R3-3]
	_ = x[BPF_R4-4]
	_ = x[BPF_R5-5]
	_ = x[BPF_R6-6]
	_ = x[BPF_R7-7]
	_ = x[BPF_R8-8]
	_ = x[BPF_R9-9]
	_ = x[BPF_R10-10]
}

const _Register_name = "r0r1r2r3r4r5r6r7r8r9r10"

var _Register_index = [...]uint8{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 23}

func (i Register) String() string {
	if i >= Register(len(_Register_index)-1) {
		return "Register(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Register_name[_Register_index[i]:_Register_index[i+1]]
}
