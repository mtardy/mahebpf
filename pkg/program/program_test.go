package program

import (
	"testing"

	"github.com/mtardy/mahebpf/pkg/instruction"
)

var testProg = []uint64{
	0xbf16000000000000,
	0xb701000000000000,
	0x631afcff00000000,
	0xbfa2000000000000,
	0x07020000fcffffff,
	0x1801000000000000,
	0x8500000001000000,
	0xbf07000000000000,
	0x1507790000000000,
	0xb701000070000000,
	0xbf63000000000000,
	0x0f13000000000000,
	0xbfa1000000000000,
	0x07010000f0ffffff,
	0xb702000008000000,
	0x8500000004000000,
	0x79a9f0ff00000000,
	0x7971401000000000,
	0x5501150000000000,
	0xb701000000000000,
	0x631aecff00000000,
	0xbfa2000000000000,
	0x07020000ecffffff,
	0x1801000000000000,
	0x8500000001000000,
	0xbf08000000000000,
	0x1508660000000000,
	0xb7010000e0040000,
	0xbf93000000000000,
	0x0f13000000000000,
	0xbfa1000000000000,
	0x07010000f0ffffff,
	0xb702000008000000,
	0x8500000004000000,
	0x79a1f0ff00000000,
	0x7982000000000000,
	0x5d125c0000000000,
	0x7b97401000000000,
	0x0500010000000000,
	0x5d91590000000000,
	0x8500000023000000,
	0xb7010000c4030000,
	0x0f10000000000000,
	0xbfa1000000000000,
	0x07010000f0ffffff,
	0xb702000004000000,
	0xbf03000000000000,
	0x8500000004000000,
	0x61a9f0ff00000000,
	0x639af0ff00000000,
	0xbfa2000000000000,
	0x07020000f0ffffff,
	0x1801000000000000,
	0x8500000001000000,
	0x1500490000000000,
	0x6101000000000000,
	0x6317100000000000,
	0x7901080000000000,
	0x7b17180000000000,
	0xb701000068000000,
	0xbf63000000000000,
	0x0f13000000000000,
	0xbfa1000000000000,
	0x07010000f0ffffff,
	0xb702000008000000,
	0x8500000004000000,
	0xb701000000000000,
	0x79a8f0ff00000000,
	0xbf83000000000000,
	0x0f13000000000000,
	0xbfa1000000000000,
	0x07010000f0ffffff,
	0xb702000008000000,
	0x8500000004000000,
	0xb701000050000000,
	0x79a3f0ff00000000,
	0x0f13000000000000,
	0xbfa1000000000000,
	0x07010000f0ffffff,
	0xb702000008000000,
	0x8500000004000000,
	0x79a1f0ff00000000,
	0x5701000004000000,
	0x15012c0000000000,
	0xb701000038000000,
	0xbf83000000000000,
	0x0f13000000000000,
	0xbf71000000000000,
	0x070100002c000000,
	0xb702000014000000,
	0x8500000004000000,
	0xb70100004c000000,
	0xbf83000000000000,
	0x0f13000000000000,
	0xbfa1000000000000,
	0x07010000f0ffffff,
	0xb702000004000000,
	0x8500000004000000,
	0x61a1f0ff00000000,
	0x6317240000000000,
	0xb701000008000000,
	0x0f18000000000000,
	0xbfa1000000000000,
	0x07010000f0ffffff,
	0xb702000008000000,
	0xbf83000000000000,
	0x8500000004000000,
	0x79a3f0ff00000000,
	0xbf71000000000000,
	0x0701000040000000,
	0xb702000000100000,
	0x850000002d000000,
	0x6307280000000000,
	0x6397200000000000,
	0xb701000040100000,
	0x6317040000000000,
	0x8500000005000000,
	0x7b07080000000000,
	0xb70100001a000000,
	0x6b17000000000000,
	0xbf61000000000000,
	0x1802000000000000,
	0x18030000ffffffff,
	0xbf74000000000000,
	0xb705000040100000,
	0x8500000019000000,
	0xb700000000000000,
	0x9500000000000000,
}

func BenchmarkDisassemble(b *testing.B) {
	prog := NewProgram()
	for i := 0; i < len(testProg); i++ {
		ins := instruction.NewInstruction(testProg[i])
		if ins.NeedPseudoInstruction() {
			if i+1 >= len(testProg) {
				b.Errorf("ins 0x%016x needs a pseudo instruction and it's not available", ins.Basic)
			}
			ins.AddPseudoInstruction(testProg[i])
		}
		prog = append(prog, ins)
	}

	b.ResetTimer()
	for n := 0; n < b.N; n++ {
		prog.Disassemble()
	}
}
